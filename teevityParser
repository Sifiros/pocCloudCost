#!/bin/python3.6
import sys
import csv
from dateutil.parser import *
import json

if len(sys.argv) < 2:
	print("Missing .csv costs filename")
	sys.exit(0)

def main():
	try:
		costs = parseTeevityCsvCosts(sys.argv[1])
	except Exception as e:
		print(e)
		return 1
	print(json.dumps(costs))
	return 0

def parseTeevityCsvCosts(filename):
	asList = []
	byDates = {}
	datas = queryCsv(['UsageStartDate', 'UsageEndDate', 'ProductName', 'ResourceId', 'UnBlendedCost'], sys.argv[1])
	datas = list(map(mapTeevityCost, datas))

	for data in datas:
		t = data['resourceType']
		date = data['date']
		if date not in byDates:
			byDates[date] = {'date': date, 'costs': {}}
			asList.append(byDates[date])

		if t not in byDates[date]:
			byDates[date]['costs'][t] = data['cost']
		else:
			byDates[date]['costs'][t] += data['cost']

	asList.sort(key= lambda cur : parse(cur['date']).timestamp())
	return asList

def mapTeevityCost(cost):
	productNameMapping = {
		'Amazon Elastic Compute Cloud': 'ec2'
	}
	resourceType = productNameMapping[cost['ProductName']] if cost['ProductName'] in productNameMapping else cost['ProductName']
	return {
		'date': parse(cost['UsageStartDate']).isoformat(),
		'resourceType': resourceType,
		'cost': float(cost['UnBlendedCost']),
		'resourceId': cost['ResourceId']
	}

def queryCsv(columns, file):
	rows = []
	try:
		file = open(file, 'r')
		reader = csv.DictReader(file)
	except:
		print("Unable to parse specified csv file")
		sys.exit(1)

	for row in reader:
		curDict = {}
		for column in columns:
			curDict[column] = row[column]
		rows.append(dict(curDict))

	file.close()
	return rows

if __name__ == "__main__":
    sys.exit(main())
